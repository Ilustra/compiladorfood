/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(Food)
package Food;

public class Food
{
  public static void main(String args []) throws ParseException
  {
    Food parser = new Food(System.in);
    while (true)
    {
      System.out.println("peça sua comida");
      System.out.print("esperando pedido: ");
      try
      {
        switch (Food.main())
        {
          case 0 : 
          System.out.println("OK.");
          break;
          case 1 : 
          System.out.println("Goodbye.");
          break;
          default : 
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        Food.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}

PARSER_END(Food)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"

}

TOKEN : /*TIPOS DE DADOS*/
{
 < TIPOINTEIRO   	: "toast"    >
| < TPREAL      	: "water"    >
| < TPSTRING    	: "sushi"    >
| < TIPOBOOL   		: "processed"  >
| < CARACTER		: ["A"-"Z"] | ["a"-"z"] >

}


TOKEN /* Estrutura */:
{
  < INICIOPROGRAMA : "dish" >
| < ABREBLOCO : "{" >
| < FECHABLOCO : "}" >
| < ABRE_COND : "(" >
| < FECHA_COND : ")" >
| < FIM_INSTRUCT : ";" >
| < ID : <CARACTER> (< CARACTER> | < DIGITO>)* >

}

TOKEN : /* Condicionais */
{
  < CONDIF: "knif" >
| < CONDELSE: "fork" >
| < REPWHILE: "rotation" >
| < REPFOR: "package">
| < ENTAO: "to">

}


TOKEN :
{
  < NUMERO : (< DIGITO >)+ >
| < DIGITO : [ "0"-"9" ] >
| < BOOL: ("TRUE" | "FALSE" | "true" | "false")>

}


TOKEN : /* OPERADOES LÓGICOS  */
{
 < DIFERENTE: "!=">
| < MENORIGUAL: "<=">
| < MAIORIGUAL: ">=">
| < IGUAL: "==">
| < E : "&&" >
| < OU: "||">
| < MAIOR: ">">
| < MENOR: "<">

}


TOKEN : /* OPERADORES MATEMATICOS */
{
  < MAIS: "+">
| < MENOS: "-">
| < MULTI: "*">
| < DIV: "/">
| < ATRIBUI: "=">

}
	
int main() :
{}
{
<INICIOPROGRAMA> <ID>
<ABREBLOCO>
(defineVariaveis())*
(body())*
<FECHABLOCO>
{return 0;}
}

void tipoDado() :
{}
{
 <TIPOINTEIRO > | <TIPOBOOL > | <TPSTRING > | < TPREAL > 
}

void calculo() :
{} 
{
		< MAIS >
	|	< MENOS >
	|	< MULTI >
	|	< DIV >	
}

void comparacao() :
{} 
{
		< MAIOR >
	|	< MENOR >
	|	< MENORIGUAL >
	|	< MAIORIGUAL >
	|	< DIFERENTE >
	|	< IGUAL >
}

void opearacaoLogica() :
{}
{
 	<E>
| <OU>

}

void body() :
{}
{
  	<ID> atribuicaoVar() |
	< CONDIF > (cond())* < ENTAO > (< ABRE_COND > body() < FECHA_COND>) 
	
}

void entrada() :
{}
{
	<ID> | <NUMERO>
}

void defineVariaveis() : 
{} 
{
	  <TIPOINTEIRO> (<ID> (atribuicaoVar())* <FIM_INSTRUCT>)+
	| <TIPOBOOL> (<ID> (atribuicaoVar())* <FIM_INSTRUCT>)+
	| <TPSTRING> (<ID> (atribuicaoVar())* <FIM_INSTRUCT>)+
	| <TPREAL> (<ID> (atribuicaoVar())* <FIM_INSTRUCT>)+
}

void atribuicaoVar() :
{}
{
	 <ATRIBUI> (<NUMERO> | <ID> ) 

}

void cond() :
{}
{
	entrada() comparacao() entrada() (opearacaoLogica() cond())* 
}








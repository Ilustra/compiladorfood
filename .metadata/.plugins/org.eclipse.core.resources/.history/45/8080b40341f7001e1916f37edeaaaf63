/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(Food)
package Food;

public class Food
{
  public static void main(String args []) throws ParseException
  {
    Food parser = new Food(System.in);
    while (true)
    {
      System.out.println("peça sua comida");
      System.out.print("esperando pedido: ");
      try
      {
        switch (Food.main())
        {
          case 0 : 
          System.out.println("COMIDA ENTREGUE");
          break;
          case 1 : 
          System.out.println("FALTOU IGREDIENTE");
          break;
          default : 
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        Food.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}

PARSER_END(Food)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"

}

TOKEN : /* Tipos de dado */
{
  < TIPOINTEIRO: "torrada" >
| < TIPOBOOL: "processado" >
| < TIPOSTRING: "macarronada" >
}


TOKEN /* Estrutura */:
{
  < INICIOPROGRAMA : "dish" >
| < ABREBLOCO : "churrasco" >
| < FIMBLOCO : "cafe" >
| < ABREBLOCOND : "milk" >
| < FECHABLOCOND : "sushi" >
}

TOKEN : /* Condicionais */
{
  < CONDIF: "almoco" >
| < CONDELSE: "sobremesa" >
| < REPWHILE: "rodizio" >
| < REPFOR: "degustacao">
| < ENTAO: "coma">
}


TOKEN :
{
  < NUMERO : (< DIGITO >)+ >
| < #DIGITO : [ "0"-"9" ] >
| < ID : <LETRA> (< LETRA> | < DIGITO>)* >
| < LETRA: ["A"-"Z"] | ["a"-"z"] >
| < BOOL: ("TRUE" | "FALSE" | "true" | "false")>
| < ASPAS: "'">
| < FIM_STRUC: ".">

}


TOKEN : /* Express�es l�gicas */
{
 < DIFERENTE: "!=">
| < MENORIGUAL: "<=">
| < MAIORIGUAL: ">=">
| < IGUAL: "==">
| < E : "&&" >
| < OU: "||">
}


TOKEN : /* Express�es matem�ticas */
{
  < MAIS: "+">
| < MENOS: "-">
| < MULTI: "*">
| < DIV: "/">
| < MAIOR: ">">
| < MENOR: "<">
| < ATRIBUI: "=">
}
	

int main() :
{}
{
<INICIOPROGRAMA> <ID> <ABREBLOCO>

(defineVariaveis())*
(corpo())*

<FIMBLOCO>
{
	return 0;
}
}

void tipoDado() :
{}
{
 <TIPOINTEIRO > | <TIPOBOOL > | <TIPOSTRING >
}

void tipo_Calculo() :
{} 
{
		< MAIS >
	|	< MENOS >
	|	< MULTI >
	|	< DIV >	
}

void tipoComparacao() :
{} 
{
		< MAIOR >
	|	< MENOR >
	|	< MENORIGUAL >
	|	< MAIORIGUAL >
	|	< DIFERENTE >
	|	< IGUAL >
}

void tipoOperadorLogico() :
{}
{
	  <E>
	| <OU>

}

void corpo() :
{}
{
  	<ID> atribuicaoVar() |
	<CONDIF> (cond())* <ENTAO> (<ABREBLOCOND> corpo() <FECHABLOCOND>) (<CONDELSE> (<ABREBLOCOND> corpo() <FECHABLOCOND>))? |
	<REPWHILE> (cond())* (<ABREBLOCOND> corpo() <FECHABLOCOND>) |
	<REPFOR> (<ID> atribuicaoVar() <FIM_STRUC> <ID> tipoComparacao() <ID> <FIM_STRUC> <ID> atribuicaoVar() <ABREBLOCOND> corpo() <FECHABLOCOND>) |
	<FECHABLOCOND>

}

void input() :
{}
{
	<ID> | <NUMERO>
}

void defineVariaveis() : 
{} 
{
	  <TIPOINTEIRO> (<ID> (atribuicaoVar())* <FIM_STRUC>)+
	| <TIPOBOOL> (<ID> (atribuicaoVar())* <FIM_STRUC>)+
	| <TIPOSTRING> (<ID> (atribuicaoVar())* <FIM_STRUC>)+
}

void atribuicaoVar() :
{}
{
	 <ATRIBUI> (<NUMERO> | <ASPAS><ID><ASPAS> ) 

}

void cond() :
{}
{
	input() tipoComparacao() input() (tipoOperadorLogico() cond())* 
}









/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(Food)
package Food;

public class Food
{
  public static void main(String args []) throws ParseException
  {
    Food parser = new Food(System.in);
    while (true)
    {
      System.out.println("pe√ßa sua comida");
      System.out.print("esperando pedido: ");
      try
      {
        switch (Food.main())
        {
          case 0 : 
          System.out.println("COMIDA ENTREGUE");
          break;
          case 1 : 
          System.out.println("FALTOU IGREDIENTE");
          break;
          default : 
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        Food.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}

PARSER_END(Food)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"

}

TOKEN : /* Tipos de dado */
{
  < TPINTEIRO		: "torrada" >
| < TPBOOLEAN		: "processado" >
| < TPSTRING		: "macarronada" >
| < TPREAL			: "agua" >
}


TOKEN /* Estrutura */:
{
  < INICIOPROGRAMA 	: "prato" >
| < ABREBLOCO 		: "{" >
| < FECHABLOCO 		: "}" >
| < ABREBLOCOND 	: "(" >
| < FECHABLOCOND 	: ")" >
| < CONDIF			: "almoco" >
| < CONDELSE		: "sobremesa" >
| < REPWHILE		: "rodizio" >
| < REPFOR			: "degustacao">
| < ENTAO			: "coma">
}


TOKEN :
{
  < NUMERO 		: (< DIGITO >)+ >
| < #DIGITO 	: [ "0"-"9" ] >
| < ID 			: <LETRA> (< LETRA> | < DIGITO>)* >
| < LETRA		: ["A"-"Z"] | ["a"-"z"] >
| < BOOL		: ("TRUE" | "FALSE" | "true" | "false")>
| < ASPAS		: "'">
| < FIM_STRUC	: ".">

}


TOKEN :
{
 < DIFERENTE	: "!=">
| < MENORIGUAL	: "<=">
| < MAIORIGUAL	: ">=">
| < IGUAL		: "==">
| < E 			: "&&" >
| < OU			: "||">
| < MAIS		: "+">
| < MENOS		: "-">
| < MULTI		: "*">
| < DIV			: "/">
| < MAIOR		: ">">
| < MENOR		: "<">
| < ATRIBUI		: "=">
}
	

int main() :
{}
{
<INICIOPROGRAMA> id() <ABREBLOCO>

(declara_variavel())*
(body())*

<FECHABLOCO>
{
	return 0;
}
}

void tipos() :{}{ tpInteiro() | tpBoolean() | tpString() | tpReal() }

void operacao_matematica() :{} {mais()	|	menos()	|	multi()	|	div()	}

void comparacao() :
{} 
{
		maior()
	|	menor()
	|	menorIgual()
	|	maiorIgual()
	|	diferente()
	|	igual()
}


void body() :
{}
{
  	id() atribuicaoVar() |
	condIf() (cond())* entao() (abreBlocoCond() body() fechaBlocoCond()) (condElse() (abreBlocoCond() body() fechaBlocoCond()))? |
	tepWhile() (cond())* (abreBlocoCond() body() fechaBlocoCond()) |
	repFor() (id() atribuicaoVar() fimStruc() id() comparacao() id() fimStruc() id() atribuicaoVar() abreBlocoCond() body() fechaBlocoCond()) |
	fechaBlocoCond()

}
void condElse() :{}{< CONDELSE >}
void condIf() :{}{< CONDIF >}
void tepWhile() :{}{< REPWHILE >}
void abreBlocoCond() :{}{< ABREBLOCOND >}
void fechaBlocoCond() :{}{< FECHABLOCOND >}
void repFor() :{}{< REPFOR >}
void entao() :{}{< ENTAO >}
void declara_variavel() : {} {
	  tpInteiro() (id() (atribuicaoVar())* fimStruc())+
	| tpInteiro() (id() (atribuicaoVar())* fimStruc())+
	| tpInteiro() (id() (atribuicaoVar())* fimStruc())+
}
void mais() :{}{< MAIS >}
void menos() :{}{< MENOS >}
void multi() :{}{< MULTI >}
void div() :{}{< DIV >}
void maior() :{}{< MAIOR >}
void menor() :{}{< MENOR >}
void menorIgual() :{}{< MENORIGUAL >}
void maiorIgual() :{}{< MAIORIGUAL >}
void diferente() :{}{< DIFERENTE >}
void igual() :{}{< IGUAL >}
void operacao_logica() :{}{	  <E>| <OU>}
void entrada() :{}{	<ID> | <NUMERO>}
void fimStruc(): { } { <FIM_STRUC> }
void tpInteiro(): { } { <TPINTEIRO> }
void id(): { } { <ID> }
void atribuicaoVar() :{}{ <ATRIBUI> (<NUMERO> | <ASPAS><ID><ASPAS> ) }
void cond() :{}{ entrada() comparacao() entrada() (operacao_logica() cond())* }
void tpBoolean() :{}{< TPBOOLEAN >}
void tpString() :{}{< TPSTRING >}
void tpReal() :{}{< TPREAL >}








/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Food.jj */
/*@egen*//**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(Food)
package Food;

public class Food/*@bgen(jjtree)*/implements FoodTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTFoodState jjtree = new JJTFoodState();

/*@egen*/
  public static void main(String args []) throws ParseException
  {
    Food parser = new Food(System.in);
    while (true)
    {
      System.out.println("pe\u00e7a sua comida");
      System.out.print("esperando pedido: ");
      try
      {
        switch (Food.main())
        {
          case 0 : 
          System.out.println("COMIDA ENTREGUE");
          break;
          case 1 : 
          System.out.println("FALTOU IGREDIENTE");
          break;
          default : 
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        Food.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}

PARSER_END(Food)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"

}

TOKEN : /* Tipos de dado */
{
  < TPINTEIRO		: "torrada" >
| < TPBOOLEAN		: "processado" >
| < TPSTRING		: "macarronada" >
| < TPREAL			: "agua" >
}


TOKEN /* Estrutura */:
{
  < INICIOPROGRAMA 	: "prato" >
| < ABREBLOCO 		: "{" >
| < FECHABLOCO 		: "}" >
| < ABREBLOCOND 	: "(" >
| < FECHABLOCOND 	: ")" >
| < CONDIF			: "almoco" >
| < CONDELSE		: "sobremesa" >
| < REPWHILE		: "rodizio" >
| < REPFOR			: "degustacao">
| < ENTAO			: "coma">
}


TOKEN :
{
  < NUMERO 		: (< DIGITO >)+ >
| < #DIGITO 	: [ "0"-"9" ] >
| < ID 			: <LETRA> (< LETRA> | < DIGITO>)* >
| < LETRA		: ["A"-"Z"] | ["a"-"z"] >
| < BOOL		: ("TRUE" | "FALSE" | "true" | "false")>
| < ASPAS		: "'">
| < FIM_STRUC	: ".">

}


TOKEN :
{
 < DIFERENTE	: "!=">
| < MENORIGUAL	: "<=">
| < MAIORIGUAL	: ">=">
| < IGUAL		: "==">
| < E 			: "&&" >
| < OU			: "||">
| < MAIS		: "+">
| < MENOS		: "-">
| < MULTI		: "*">
| < DIV			: "/">
| < MAIOR		: ">">
| < MENOR		: "<">
| < ATRIBUI		: "=">
}
	

int main() :
{/*@bgen(jjtree) main */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) main */
try {
/*@egen*/
inicioPrograma() id() abreBloco()

(declara_variavel())*
(body())*

fechaBloco()/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
}
/*@egen*/
{
	return 0;
}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void operacao_matematica() :{/*@bgen(jjtree) operacao_matematica */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERACAO_MATEMATICA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) operacao_matematica */
                                 try {
/*@egen*/ < MAIS >|< MENOS >	|< MULTI >|< DIV >/*@bgen(jjtree)*/
                                 } finally {
                                   if (jjtc000) {
                                     jjtree.closeNodeScope(jjtn000, true);
                                   }
                                 }
/*@egen*/}
void comparacao() :{/*@bgen(jjtree) comparacao */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPARACAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) comparacao */
                        try {
/*@egen*/	< MAIOR >|< MENOR >|< MENORIGUAL >|< MAIORIGUAL >|< DIFERENTE >|< IGUAL >/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc000) {
                            jjtree.closeNodeScope(jjtn000, true);
                          }
                        }
/*@egen*/}
void operacao_logica() :{/*@bgen(jjtree) operacao_logica */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERACAO_LOGICA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) operacao_logica */
                                  try {
/*@egen*/	  <E>| <OU>/*@bgen(jjtree)*/
                                  } finally {
                                    if (jjtc000) {
                                      jjtree.closeNodeScope(jjtn000, true);
                                    }
                                  }
/*@egen*/}

void body() :
{/*@bgen(jjtree) body */
  SimpleNode jjtn000 = new SimpleNode(JJTBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) body */
        try {
/*@egen*/
  	id() atribuicaoVar() |
	condIf() (cond())* entao() (abreBlocoCond() body() fechaBlocoCond()) (condElse() (abreBlocoCond() body() fechaBlocoCond()))? |
	repWhile() (cond())* (abreBlocoCond() body() fechaBlocoCond()) |
	repFor() (id() atribuicaoVar() fimStruct() id() comparacao() id() fimStruct() id() atribuicaoVar() abreBlocoCond() body() fechaBlocoCond()) |
	fechaBlocoCond()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}


void declara_variavel() : 
{/*@bgen(jjtree) declara_variavel */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARA_VARIAVEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) declara_variavel */
          try {
/*@egen*/
	  tpInteiro() (id() (atribuicaoVar())* fimStruct())+
	| tpBoolean() (id() (atribuicaoVar())* fimStruct())+
	| tpString() (id() (atribuicaoVar())* fimStruct())+/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
}

void cond() :{/*@bgen(jjtree) cond */
  SimpleNode jjtn000 = new SimpleNode(JJTCOND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) cond */
                        try {
/*@egen*/	entrada() comparacao() entrada() (operacao_logica() cond())*/*@bgen(jjtree)*/
                        } catch (Throwable jjte000) {
                          if (jjtc000) {
                            jjtree.clearNodeScope(jjtn000);
                            jjtc000 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte000 instanceof RuntimeException) {
                            throw (RuntimeException)jjte000;
                          }
                          if (jjte000 instanceof ParseException) {
                            throw (ParseException)jjte000;
                          }
                          throw (Error)jjte000;
                        } finally {
                          if (jjtc000) {
                            jjtree.closeNodeScope(jjtn000, true);
                          }
                        }
/*@egen*/ }
void atribuicaoVar() :{/*@bgen(jjtree) atribuicaoVar */
  SimpleNode jjtn000 = new SimpleNode(JJTATRIBUICAOVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) atribuicaoVar */
                                 try {
/*@egen*/	 atribui() (numero() | aspas() id() aspas() )/*@bgen(jjtree)*/
                                 } catch (Throwable jjte000) {
                                   if (jjtc000) {
                                     jjtree.clearNodeScope(jjtn000);
                                     jjtc000 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte000 instanceof RuntimeException) {
                                     throw (RuntimeException)jjte000;
                                   }
                                   if (jjte000 instanceof ParseException) {
                                     throw (ParseException)jjte000;
                                   }
                                   throw (Error)jjte000;
                                 } finally {
                                   if (jjtc000) {
                                     jjtree.closeNodeScope(jjtn000, true);
                                   }
                                 }
/*@egen*/ }

void inicioPrograma(): {/*@bgen(jjtree) inicioPrograma */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIOPROGRAMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } {/*@bgen(jjtree) inicioPrograma */
                             try {
/*@egen*/ <INICIOPROGRAMA>/*@bgen(jjtree)*/
                             } finally {
                               if (jjtc000) {
                                 jjtree.closeNodeScope(jjtn000, true);
                               }
                             }
/*@egen*/ }
void abreBloco(): {/*@bgen(jjtree) abreBloco */
  SimpleNode jjtn000 = new SimpleNode(JJTABREBLOCO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } {/*@bgen(jjtree) abreBloco */
                        try {
/*@egen*/ <ABREBLOCO>/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc000) {
                            jjtree.closeNodeScope(jjtn000, true);
                          }
                        }
/*@egen*/ }
void tipos() :{/*@bgen(jjtree) tipos */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) tipos */
                  try {
/*@egen*/ <TPINTEIRO > | <TPBOOLEAN > | <TPSTRING > | < TPREAL >/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc000) {
                      jjtree.closeNodeScope(jjtn000, true);
                    }
                  }
/*@egen*/}
void fechaBloco(): {/*@bgen(jjtree) fechaBloco */
  SimpleNode jjtn000 = new SimpleNode(JJTFECHABLOCO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } {/*@bgen(jjtree) fechaBloco */
                         try {
/*@egen*/ <FECHABLOCO>/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc000) {
                             jjtree.closeNodeScope(jjtn000, true);
                           }
                         }
/*@egen*/ }
void entao(): {/*@bgen(jjtree) entao */
  SimpleNode jjtn000 = new SimpleNode(JJTENTAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } {/*@bgen(jjtree) entao */
                    try {
/*@egen*/ <ENTAO>/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc000) {
                        jjtree.closeNodeScope(jjtn000, true);
                      }
                    }
/*@egen*/ }
void repFor(): {/*@bgen(jjtree) repFor */
  SimpleNode jjtn000 = new SimpleNode(JJTREPFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } {/*@bgen(jjtree) repFor */
                     try {
/*@egen*/ <REPFOR>/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                       }
                     }
/*@egen*/ }
void repWhile(): {/*@bgen(jjtree) repWhile */
  SimpleNode jjtn000 = new SimpleNode(JJTREPWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } {/*@bgen(jjtree) repWhile */
                       try {
/*@egen*/ <REPWHILE>/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc000) {
                           jjtree.closeNodeScope(jjtn000, true);
                         }
                       }
/*@egen*/ }
void condIf(): {/*@bgen(jjtree) condIf */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } {/*@bgen(jjtree) condIf */
                     try {
/*@egen*/ <CONDIF>/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                       }
                     }
/*@egen*/ }
void condElse(): {/*@bgen(jjtree) condElse */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } {/*@bgen(jjtree) condElse */
                       try {
/*@egen*/ <CONDELSE>/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc000) {
                           jjtree.closeNodeScope(jjtn000, true);
                         }
                       }
/*@egen*/ }
void entrada() :{/*@bgen(jjtree) entrada */
  SimpleNode jjtn000 = new SimpleNode(JJTENTRADA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) entrada */
                        try {
/*@egen*/	id() | numero()/*@bgen(jjtree)*/
                        } catch (Throwable jjte000) {
                          if (jjtc000) {
                            jjtree.clearNodeScope(jjtn000);
                            jjtc000 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte000 instanceof RuntimeException) {
                            throw (RuntimeException)jjte000;
                          }
                          if (jjte000 instanceof ParseException) {
                            throw (ParseException)jjte000;
                          }
                          throw (Error)jjte000;
                        } finally {
                          if (jjtc000) {
                            jjtree.closeNodeScope(jjtn000, true);
                          }
                        }
/*@egen*/}
void fechaBlocoCond(): {/*@bgen(jjtree) fechaBlocoCond */
  SimpleNode jjtn000 = new SimpleNode(JJTFECHABLOCOCOND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } {/*@bgen(jjtree) fechaBlocoCond */
                             try {
/*@egen*/ <FECHABLOCOND>/*@bgen(jjtree)*/
                             } finally {
                               if (jjtc000) {
                                 jjtree.closeNodeScope(jjtn000, true);
                               }
                             }
/*@egen*/ }
void abreBlocoCond(): {/*@bgen(jjtree) abreBlocoCond */
  SimpleNode jjtn000 = new SimpleNode(JJTABREBLOCOCOND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } {/*@bgen(jjtree) abreBlocoCond */
                            try {
/*@egen*/ <ABREBLOCOND>/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc000) {
                                jjtree.closeNodeScope(jjtn000, true);
                              }
                            }
/*@egen*/ }
void tpString(): {/*@bgen(jjtree) tpString */
  SimpleNode jjtn000 = new SimpleNode(JJTTPSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } {/*@bgen(jjtree) tpString */
                       try {
/*@egen*/ <TPSTRING>/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc000) {
                           jjtree.closeNodeScope(jjtn000, true);
                         }
                       }
/*@egen*/ }
void tpInteiro(): {/*@bgen(jjtree) tpInteiro */
  SimpleNode jjtn000 = new SimpleNode(JJTTPINTEIRO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } {/*@bgen(jjtree) tpInteiro */
                        try {
/*@egen*/ <TPINTEIRO>/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc000) {
                            jjtree.closeNodeScope(jjtn000, true);
                          }
                        }
/*@egen*/ }
void tpBoolean(): {/*@bgen(jjtree) tpBoolean */
  SimpleNode jjtn000 = new SimpleNode(JJTTPBOOLEAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } {/*@bgen(jjtree) tpBoolean */
                        try {
/*@egen*/ <TPBOOLEAN>/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc000) {
                            jjtree.closeNodeScope(jjtn000, true);
                          }
                        }
/*@egen*/ }
void fimStruct(): {/*@bgen(jjtree) fimStruct */
  SimpleNode jjtn000 = new SimpleNode(JJTFIMSTRUCT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } {/*@bgen(jjtree) fimStruct */
                        try {
/*@egen*/ <FIM_STRUC>/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc000) {
                            jjtree.closeNodeScope(jjtn000, true);
                          }
                        }
/*@egen*/ }
void id(): {/*@bgen(jjtree) id */
  SimpleNode jjtn000 = new SimpleNode(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } {/*@bgen(jjtree) id */
                 try {
/*@egen*/ <ID>/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc000) {
                     jjtree.closeNodeScope(jjtn000, true);
                   }
                 }
/*@egen*/ }
void aspas(): {/*@bgen(jjtree) aspas */
  SimpleNode jjtn000 = new SimpleNode(JJTASPAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } {/*@bgen(jjtree) aspas */
                    try {
/*@egen*/ <ASPAS>/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc000) {
                        jjtree.closeNodeScope(jjtn000, true);
                      }
                    }
/*@egen*/ }
void atribui(): {/*@bgen(jjtree) atribui */
  SimpleNode jjtn000 = new SimpleNode(JJTATRIBUI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } {/*@bgen(jjtree) atribui */
                      try {
/*@egen*/ <ATRIBUI>/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc000) {
                          jjtree.closeNodeScope(jjtn000, true);
                        }
                      }
/*@egen*/ }
void numero(): {/*@bgen(jjtree) numero */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMERO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } {/*@bgen(jjtree) numero */
                     try {
/*@egen*/ <NUMERO>/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                       }
                     }
/*@egen*/ }
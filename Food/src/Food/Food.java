/* Food.java */
/* Generated By:JavaCC: Do not edit this line. Food.java */
package Food;

public class Food implements FoodConstants {
  public static void main(String args []) throws ParseException
  {
    Food parser = new Food(System.in);
    while (true)
    {
      System.out.println("pe\u00e7a sua comida");
      System.out.print("esperando pedido: ");
      try
      {
        switch (Food.main())
        {
          case 0 :
          System.out.println("COMIDA ENTREGUE");
          break;
          case 1 :
          System.out.println("FALTOU IGREDIENTE");
          break;
          default :
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        Food.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

  static final public int main() throws ParseException {
    jj_consume_token(INICIOPROGRAMA);
    jj_consume_token(ID);
    jj_consume_token(ABREBLOCO);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TPINTEIRO:
      case TPBOOLEAN:
      case TPSTRING:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      declara_variavel();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FECHABLOCOND:
      case CONDIF:
      case REPWHILE:
      case REPFOR:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      body();
    }
    jj_consume_token(FECHABLOCO);
{if ("" != null) return 0;}
    throw new Error("Missing return statement in function");
}

  static final public void tipos() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TPINTEIRO:{
      jj_consume_token(TPINTEIRO);
      break;
      }
    case TPBOOLEAN:{
      jj_consume_token(TPBOOLEAN);
      break;
      }
    case TPSTRING:{
      jj_consume_token(TPSTRING);
      break;
      }
    case TPREAL:{
      jj_consume_token(TPREAL);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void operacao_matematica() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MAIS:{
      jj_consume_token(MAIS);
      break;
      }
    case MENOS:{
      jj_consume_token(MENOS);
      break;
      }
    case MULTI:{
      jj_consume_token(MULTI);
      break;
      }
    case DIV:{
      jj_consume_token(DIV);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void comparacao() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MAIOR:{
      jj_consume_token(MAIOR);
      break;
      }
    case MENOR:{
      jj_consume_token(MENOR);
      break;
      }
    case MENORIGUAL:{
      jj_consume_token(MENORIGUAL);
      break;
      }
    case MAIORIGUAL:{
      jj_consume_token(MAIORIGUAL);
      break;
      }
    case DIFERENTE:{
      jj_consume_token(DIFERENTE);
      break;
      }
    case IGUAL:{
      jj_consume_token(IGUAL);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void operacao_logica() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case E:{
      jj_consume_token(E);
      break;
      }
    case OU:{
      jj_consume_token(OU);
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void body() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      jj_consume_token(ID);
      atribuicaoVar();
      break;
      }
    case CONDIF:{
      jj_consume_token(CONDIF);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NUMERO:
        case ID:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_3;
        }
        cond();
      }
      jj_consume_token(ENTAO);
      jj_consume_token(ABREBLOCOND);
      body();
      jj_consume_token(FECHABLOCOND);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CONDELSE:{
        jj_consume_token(CONDELSE);
        jj_consume_token(ABREBLOCOND);
        body();
        jj_consume_token(FECHABLOCOND);
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      break;
      }
    case REPWHILE:{
      jj_consume_token(REPWHILE);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NUMERO:
        case ID:{
          ;
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          break label_4;
        }
        cond();
      }
      jj_consume_token(ABREBLOCOND);
      body();
      jj_consume_token(FECHABLOCOND);
      break;
      }
    case REPFOR:{
      jj_consume_token(REPFOR);
      jj_consume_token(ID);
      atribuicaoVar();
      jj_consume_token(FIM_STRUC);
      jj_consume_token(ID);
      comparacao();
      jj_consume_token(ID);
      jj_consume_token(FIM_STRUC);
      jj_consume_token(ID);
      atribuicaoVar();
      jj_consume_token(ABREBLOCOND);
      body();
      jj_consume_token(FECHABLOCOND);
      break;
      }
    case FECHABLOCOND:{
      jj_consume_token(FECHABLOCOND);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void entrada() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      jj_consume_token(ID);
      break;
      }
    case NUMERO:{
      jj_consume_token(NUMERO);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void declara_variavel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TPINTEIRO:{
      jj_consume_token(TPINTEIRO);
      label_5:
      while (true) {
        jj_consume_token(ID);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ATRIBUI:{
            ;
            break;
            }
          default:
            jj_la1[11] = jj_gen;
            break label_6;
          }
          atribuicaoVar();
        }
        jj_consume_token(FIM_STRUC);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ID:{
          ;
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          break label_5;
        }
      }
      break;
      }
    case TPBOOLEAN:{
      jj_consume_token(TPBOOLEAN);
      label_7:
      while (true) {
        jj_consume_token(ID);
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ATRIBUI:{
            ;
            break;
            }
          default:
            jj_la1[13] = jj_gen;
            break label_8;
          }
          atribuicaoVar();
        }
        jj_consume_token(FIM_STRUC);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ID:{
          ;
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          break label_7;
        }
      }
      break;
      }
    case TPSTRING:{
      jj_consume_token(TPSTRING);
      label_9:
      while (true) {
        jj_consume_token(ID);
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ATRIBUI:{
            ;
            break;
            }
          default:
            jj_la1[15] = jj_gen;
            break label_10;
          }
          atribuicaoVar();
        }
        jj_consume_token(FIM_STRUC);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ID:{
          ;
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          break label_9;
        }
      }
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void atribuicaoVar() throws ParseException {
    jj_consume_token(ATRIBUI);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMERO:{
      jj_consume_token(NUMERO);
      break;
      }
    case ASPAS:{
      jj_consume_token(ASPAS);
      jj_consume_token(ID);
      jj_consume_token(ASPAS);
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void cond() throws ParseException {
    entrada();
    comparacao();
    entrada();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case E:
      case OU:{
        ;
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_11;
      }
      operacao_logica();
      cond();
    }
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public FoodTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[20];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0xe0,0x236000,0x1e0,0x0,0x3c000000,0xc0000000,0x280000,0x8000,0x280000,0x236000,0x280000,0x0,0x200000,0x0,0x200000,0x0,0x200000,0xe0,0x1080000,0xc0000000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0xf,0x30,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,};
	}

  /** Constructor with InputStream. */
  public Food(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Food(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new FoodTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Food(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new FoodTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new FoodTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Food(FoodTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(FoodTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[39];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 20; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 39; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}

/* Food.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Food.java */
package Food;

public class Food/*@bgen(jjtree)*/implements FoodTreeConstants, FoodConstants {/*@bgen(jjtree)*/
  protected static JJTFoodState jjtree = new JJTFoodState();public static void main(String args []) throws ParseException
  {
    Food parser = new Food(System.in);
    while (true)
    {
      System.out.println("pe\u00e7a sua comida");
      System.out.print("esperando pedido: ");
      try
      {
        switch (Food.main())
        {
          case 0 :
          System.out.println("COMIDA ENTREGUE");
          break;
          case 1 :
          System.out.println("FALTOU IGREDIENTE");
          break;
          default :
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        Food.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

  static final public int main() throws ParseException {/*@bgen(jjtree) main */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      inicioPrograma();
      id();
      abreBloco();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TPINTEIRO:
        case TPBOOLEAN:
        case TPSTRING:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        declara_variavel();
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FECHABLOCOND:
        case CONDIF:
        case REPWHILE:
        case REPFOR:
        case ID:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        body();
      }
      fechaBloco();
jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
{if ("" != null) return 0;}
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
}

  static final public void operacao_matematica() throws ParseException {/*@bgen(jjtree) operacao_matematica */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERACAO_MATEMATICA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MAIS:{
        jj_consume_token(MAIS);
        break;
        }
      case MENOS:{
        jj_consume_token(MENOS);
        break;
        }
      case MULTI:{
        jj_consume_token(MULTI);
        break;
        }
      case DIV:{
        jj_consume_token(DIV);
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
                                     jjtree.closeNodeScope(jjtn000, true);
                                   }
    }
}

  static final public void comparacao() throws ParseException {/*@bgen(jjtree) comparacao */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPARACAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MAIOR:{
        jj_consume_token(MAIOR);
        break;
        }
      case MENOR:{
        jj_consume_token(MENOR);
        break;
        }
      case MENORIGUAL:{
        jj_consume_token(MENORIGUAL);
        break;
        }
      case MAIORIGUAL:{
        jj_consume_token(MAIORIGUAL);
        break;
        }
      case DIFERENTE:{
        jj_consume_token(DIFERENTE);
        break;
        }
      case IGUAL:{
        jj_consume_token(IGUAL);
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
                            jjtree.closeNodeScope(jjtn000, true);
                          }
    }
}

  static final public void operacao_logica() throws ParseException {/*@bgen(jjtree) operacao_logica */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERACAO_LOGICA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case E:{
        jj_consume_token(E);
        break;
        }
      case OU:{
        jj_consume_token(OU);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
                                      jjtree.closeNodeScope(jjtn000, true);
                                    }
    }
}

  static final public void body() throws ParseException {/*@bgen(jjtree) body */
  SimpleNode jjtn000 = new SimpleNode(JJTBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
        id();
        atribuicaoVar();
        break;
        }
      case CONDIF:{
        condIf();
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case NUMERO:
          case ID:{
            ;
            break;
            }
          default:
            jj_la1[5] = jj_gen;
            break label_3;
          }
          cond();
        }
        entao();
        abreBlocoCond();
        body();
        fechaBlocoCond();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CONDELSE:{
          condElse();
          abreBlocoCond();
          body();
          fechaBlocoCond();
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          ;
        }
        break;
        }
      case REPWHILE:{
        repWhile();
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case NUMERO:
          case ID:{
            ;
            break;
            }
          default:
            jj_la1[7] = jj_gen;
            break label_4;
          }
          cond();
        }
        abreBlocoCond();
        body();
        fechaBlocoCond();
        break;
        }
      case REPFOR:{
        repFor();
        id();
        atribuicaoVar();
        fimStruct();
        id();
        comparacao();
        id();
        fimStruct();
        id();
        atribuicaoVar();
        abreBlocoCond();
        body();
        fechaBlocoCond();
        break;
        }
      case FECHABLOCOND:{
        fechaBlocoCond();
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void declara_variavel() throws ParseException {/*@bgen(jjtree) declara_variavel */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARA_VARIAVEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TPINTEIRO:{
        tpInteiro();
        label_5:
        while (true) {
          id();
          label_6:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case ATRIBUI:{
              ;
              break;
              }
            default:
              jj_la1[9] = jj_gen;
              break label_6;
            }
            atribuicaoVar();
          }
          fimStruct();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ID:{
            ;
            break;
            }
          default:
            jj_la1[10] = jj_gen;
            break label_5;
          }
        }
        break;
        }
      case TPBOOLEAN:{
        tpBoolean();
        label_7:
        while (true) {
          id();
          label_8:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case ATRIBUI:{
              ;
              break;
              }
            default:
              jj_la1[11] = jj_gen;
              break label_8;
            }
            atribuicaoVar();
          }
          fimStruct();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ID:{
            ;
            break;
            }
          default:
            jj_la1[12] = jj_gen;
            break label_7;
          }
        }
        break;
        }
      case TPSTRING:{
        tpString();
        label_9:
        while (true) {
          id();
          label_10:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case ATRIBUI:{
              ;
              break;
              }
            default:
              jj_la1[13] = jj_gen;
              break label_10;
            }
            atribuicaoVar();
          }
          fimStruct();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ID:{
            ;
            break;
            }
          default:
            jj_la1[14] = jj_gen;
            break label_9;
          }
        }
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
}

  static final public void cond() throws ParseException {/*@bgen(jjtree) cond */
  SimpleNode jjtn000 = new SimpleNode(JJTCOND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      entrada();
      comparacao();
      entrada();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case E:
        case OU:{
          ;
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          break label_11;
        }
        operacao_logica();
        cond();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                            jjtree.clearNodeScope(jjtn000);
                            jjtc000 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte000 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte000;}
                          }
                          if (jjte000 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte000;}
                          }
                          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                            jjtree.closeNodeScope(jjtn000, true);
                          }
    }
}

  static final public void atribuicaoVar() throws ParseException {/*@bgen(jjtree) atribuicaoVar */
  SimpleNode jjtn000 = new SimpleNode(JJTATRIBUICAOVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      atribui();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMERO:{
        numero();
        break;
        }
      case ASPAS:{
        aspas();
        id();
        aspas();
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                                     jjtree.clearNodeScope(jjtn000);
                                     jjtc000 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte000 instanceof RuntimeException) {
                                     {if (true) throw (RuntimeException)jjte000;}
                                   }
                                   if (jjte000 instanceof ParseException) {
                                     {if (true) throw (ParseException)jjte000;}
                                   }
                                   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                                     jjtree.closeNodeScope(jjtn000, true);
                                   }
    }
}

  static final public void inicioPrograma() throws ParseException {/*@bgen(jjtree) inicioPrograma */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIOPROGRAMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INICIOPROGRAMA);
    } finally {
if (jjtc000) {
                                 jjtree.closeNodeScope(jjtn000, true);
                               }
    }
}

  static final public void abreBloco() throws ParseException {/*@bgen(jjtree) abreBloco */
  SimpleNode jjtn000 = new SimpleNode(JJTABREBLOCO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ABREBLOCO);
    } finally {
if (jjtc000) {
                            jjtree.closeNodeScope(jjtn000, true);
                          }
    }
}

  static final public void tipos() throws ParseException {/*@bgen(jjtree) tipos */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TPINTEIRO:{
        jj_consume_token(TPINTEIRO);
        break;
        }
      case TPBOOLEAN:{
        jj_consume_token(TPBOOLEAN);
        break;
        }
      case TPSTRING:{
        jj_consume_token(TPSTRING);
        break;
        }
      case TPREAL:{
        jj_consume_token(TPREAL);
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
                      jjtree.closeNodeScope(jjtn000, true);
                    }
    }
}

  static final public void fechaBloco() throws ParseException {/*@bgen(jjtree) fechaBloco */
  SimpleNode jjtn000 = new SimpleNode(JJTFECHABLOCO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FECHABLOCO);
    } finally {
if (jjtc000) {
                             jjtree.closeNodeScope(jjtn000, true);
                           }
    }
}

  static final public void entao() throws ParseException {/*@bgen(jjtree) entao */
  SimpleNode jjtn000 = new SimpleNode(JJTENTAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ENTAO);
    } finally {
if (jjtc000) {
                        jjtree.closeNodeScope(jjtn000, true);
                      }
    }
}

  static final public void repFor() throws ParseException {/*@bgen(jjtree) repFor */
  SimpleNode jjtn000 = new SimpleNode(JJTREPFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(REPFOR);
    } finally {
if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                       }
    }
}

  static final public void repWhile() throws ParseException {/*@bgen(jjtree) repWhile */
  SimpleNode jjtn000 = new SimpleNode(JJTREPWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(REPWHILE);
    } finally {
if (jjtc000) {
                           jjtree.closeNodeScope(jjtn000, true);
                         }
    }
}

  static final public void condIf() throws ParseException {/*@bgen(jjtree) condIf */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CONDIF);
    } finally {
if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                       }
    }
}

  static final public void condElse() throws ParseException {/*@bgen(jjtree) condElse */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CONDELSE);
    } finally {
if (jjtc000) {
                           jjtree.closeNodeScope(jjtn000, true);
                         }
    }
}

  static final public void entrada() throws ParseException {/*@bgen(jjtree) entrada */
  SimpleNode jjtn000 = new SimpleNode(JJTENTRADA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
        id();
        break;
        }
      case NUMERO:{
        numero();
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                            jjtree.clearNodeScope(jjtn000);
                            jjtc000 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte000 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte000;}
                          }
                          if (jjte000 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte000;}
                          }
                          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                            jjtree.closeNodeScope(jjtn000, true);
                          }
    }
}

  static final public void fechaBlocoCond() throws ParseException {/*@bgen(jjtree) fechaBlocoCond */
  SimpleNode jjtn000 = new SimpleNode(JJTFECHABLOCOCOND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FECHABLOCOND);
    } finally {
if (jjtc000) {
                                 jjtree.closeNodeScope(jjtn000, true);
                               }
    }
}

  static final public void abreBlocoCond() throws ParseException {/*@bgen(jjtree) abreBlocoCond */
  SimpleNode jjtn000 = new SimpleNode(JJTABREBLOCOCOND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ABREBLOCOND);
    } finally {
if (jjtc000) {
                                jjtree.closeNodeScope(jjtn000, true);
                              }
    }
}

  static final public void tpString() throws ParseException {/*@bgen(jjtree) tpString */
  SimpleNode jjtn000 = new SimpleNode(JJTTPSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TPSTRING);
    } finally {
if (jjtc000) {
                           jjtree.closeNodeScope(jjtn000, true);
                         }
    }
}

  static final public void tpInteiro() throws ParseException {/*@bgen(jjtree) tpInteiro */
  SimpleNode jjtn000 = new SimpleNode(JJTTPINTEIRO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TPINTEIRO);
    } finally {
if (jjtc000) {
                            jjtree.closeNodeScope(jjtn000, true);
                          }
    }
}

  static final public void tpBoolean() throws ParseException {/*@bgen(jjtree) tpBoolean */
  SimpleNode jjtn000 = new SimpleNode(JJTTPBOOLEAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TPBOOLEAN);
    } finally {
if (jjtc000) {
                            jjtree.closeNodeScope(jjtn000, true);
                          }
    }
}

  static final public void fimStruct() throws ParseException {/*@bgen(jjtree) fimStruct */
  SimpleNode jjtn000 = new SimpleNode(JJTFIMSTRUCT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FIM_STRUC);
    } finally {
if (jjtc000) {
                            jjtree.closeNodeScope(jjtn000, true);
                          }
    }
}

  static final public void id() throws ParseException {/*@bgen(jjtree) id */
  SimpleNode jjtn000 = new SimpleNode(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ID);
    } finally {
if (jjtc000) {
                     jjtree.closeNodeScope(jjtn000, true);
                   }
    }
}

  static final public void aspas() throws ParseException {/*@bgen(jjtree) aspas */
  SimpleNode jjtn000 = new SimpleNode(JJTASPAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ASPAS);
    } finally {
if (jjtc000) {
                        jjtree.closeNodeScope(jjtn000, true);
                      }
    }
}

  static final public void atribui() throws ParseException {/*@bgen(jjtree) atribui */
  SimpleNode jjtn000 = new SimpleNode(JJTATRIBUI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ATRIBUI);
    } finally {
if (jjtc000) {
                          jjtree.closeNodeScope(jjtn000, true);
                        }
    }
}

  static final public void numero() throws ParseException {/*@bgen(jjtree) numero */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMERO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NUMERO);
    } finally {
if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                       }
    }
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public FoodTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[20];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0xe0,0x236000,0x0,0x3c000000,0xc0000000,0x280000,0x8000,0x280000,0x236000,0x0,0x200000,0x0,0x200000,0x0,0x200000,0xe0,0xc0000000,0x1080000,0x1e0,0x280000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0xf,0x30,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,};
	}

  /** Constructor with InputStream. */
  public Food(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Food(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new FoodTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Food(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new FoodTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new FoodTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Food(FoodTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(FoodTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[39];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 20; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 39; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
